# - *- coding: utf- 8 - *-
import asyncio

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import CantParseEntities


from tgbot.data.loader import dp, bot
from tgbot.keyboards.inline_admin import profile_search_finl, profile_search_return_finl
from tgbot.keyboards.inline_all import mail_confirm_inl
from tgbot.services.api_sqlite import *
from tgbot.utils.const_functions import is_number
from tgbot.utils.misc.bot_filters import IsAdmin
from tgbot.utils.misc_functions import open_profile_admin
from tgbot.utils.misc_functions import get_position_admin

file_photo_id = []
file_video_id = []

# –†–∞—Å—Å—ã–ª–∫–∞
@dp.message_handler(IsAdmin(), text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", state="*")
async def functions_mail(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_mail_text")
    await message.answer("<b>üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n"
                         "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É")


# –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(IsAdmin(), text="üë§ –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è üîç", state="*")
async def functions_profile(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_profile")
    await message.answer("<b>üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>")


# –ü–æ–∏—Å–∫ —á–µ–∫–æ–≤
@dp.message_handler(IsAdmin(), text="üßæ –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ üîç", state="*")
async def functions_receipt(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_receipt")
    await message.answer("<b>üßæ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</b>")


######################################## –ü–†–ò–ù–Ø–¢–ò–ï –ü–û–ò–°–ö–û–í–´–• –î–ê–ù–ù–´–• ########################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–π–¥–∏ –∏–ª–∏ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(IsAdmin(), state="here_profile")
@dp.message_handler(IsAdmin(), text_startswith=".user")
async def functions_profile_get(message: Message, state: FSMContext):
    find_user = message.text

    if ".user" in find_user:
        find_user = message.text.split(" ")
        if len(find_user) > 1:
            find_user = find_user[1]
        else:
            await message.answer("<b>‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ª–æ–≥–∏–Ω –∏–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>\n"
                                 "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

    if find_user.isdigit():
        get_user = get_userx(user_id=find_user)
    else:
        if find_user.startswith("@"): find_user = find_user[1:]
        get_user = get_userx(user_login=find_user.lower())

    if get_user is not None:
        await state.finish()
        await message.answer(open_profile_admin(get_user['user_id']),
                             reply_markup=profile_search_finl(get_user['user_id']))
    else:
        await message.answer("<b>‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω</b>\n"
                             "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


# –ü—Ä–∏–Ω—è—Ç–∏–µ —á–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
@dp.message_handler(IsAdmin(), state="here_receipt")
@dp.message_handler(IsAdmin(), text_startswith=".rec")
async def functions_receipt_get(message: Message, state: FSMContext):
    find_receipt = message.text

    if ".rec" in find_receipt:
        find_receipt = message.text.split(" ")
        if len(find_receipt) > 1:
            find_receipt = find_receipt[1]
        else:
            await message.answer("<b>‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.</b>\n"
                                 "üßæ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
            return

    if find_receipt.startswith("#"): find_receipt = find_receipt[1:]


    get_purchase = get_purchasex(purchase_receipt=find_receipt)
    if get_purchase is not None:
        await state.finish()
        await message.answer(
            f"<b>üßæ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>#{get_purchase['purchase_receipt']}</code></b>\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_purchase['user_id']}'>{get_purchase['user_name']}</a> | <code>{get_purchase['user_id']}</code>\n"
            f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_purchase['purchase_position_name']}</code>\n"
            f"üì¶ –ó–∞–∫–∞–∑–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{get_purchase['purchase_count']}—à—Ç</code>\n"
            f"üí∞ –¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: <code>{get_purchase['purchase_price_one']}‚ÇΩ</code>\n"
            f"üí∏ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <code>{get_purchase['purchase_price']}‚ÇΩ</code>\n"
            f"üï∞ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: <code>{get_purchase['purchase_date']}</code>"
        )
        return
    else:
        await message.answer("<b>‚ùå –ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.</b>\n"
                             "üßæ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")


######################################## –†–ê–°–°–´–õ–ö–ê ########################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(IsAdmin(), state="here_mail_text")
async def functions_mail_get(message: Message, state: FSMContext):
    await state.update_data(here_mail_text=message.text)
    # –û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö –ø–µ—Ä–µ–¥ –≤–µ–¥–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
    if file_photo_id != []:
        del file_photo_id[0]
    if file_video_id != []:
        del file_video_id[0]

    try:
        await state.set_state("here_mail_photo")
        await message.answer("<b>üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üì∏ –∏–ª–∏ –≤–∏–¥–µ–æ üìπ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ </b>\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
    except CantParseEntities:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É.")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(IsAdmin(), content_types="photo", state="here_mail_photo")
@dp.message_handler(IsAdmin(), content_types="text", state="here_mail_photo")
async def mail_photo(message: Message, state: FSMContext):
    get_users = get_all_usersx()
    await state.update_data()

    if "text" in message:
        photo_id = " "
        file_video_id.append('0')
    else:
        photo_id = message.photo[-1].file_id
        file_video_id.append('0')

    file_photo_id.append(photo_id)
    cache_msg = (await state.get_data())['here_mail_text']

    if len(file_photo_id[0]) >= 5:
        await message.answer_photo(photo_id, cache_msg)
    else:
        await message.answer(cache_msg)
    await state.set_state("here_mail_confirm")
    await message.answer(
        f"<b>üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{len(get_users)}</code> —é–∑–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n",
        reply_markup=mail_confirm_inl,
        disable_web_page_preview=True
    )

# –ü—Ä–∏–Ω—è—Ç–∏–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(IsAdmin(), content_types="video", state="here_mail_photo")
async def mail_video(message: Message, state: FSMContext):
    get_users = get_all_usersx()
    await state.update_data()
    video_id = message.video.file_id
    file_video_id.append(video_id)
    cache_msg = (await state.get_data())['here_mail_text']
    await state.set_state("here_mail_confirm")
    await message.answer_video(video_id, caption=cache_msg)
    file_photo_id.append('0')
    await message.answer(
        f"<b>üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{len(get_users)}</code> —é–∑–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n",
        reply_markup=mail_confirm_inl,
        disable_web_page_preview=True
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_mail", state="here_mail_confirm")
async def functions_mail_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    async with state.proxy() as data:
        send_message = data['here_mail_text']


    get_users = get_all_usersx()
    await state.finish()

    if get_action == "yes":
        await call.message.edit_text(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (0/{len(get_users)})</b>")
        asyncio.create_task(functions_mail_make(send_message,  call))
    else:
        await call.message.edit_text("<b>üì¢ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úÖ</b>")



# –°–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def functions_mail_make(message, call: CallbackQuery):
    receive_users, block_users, how_users = 0, 0, 0
    get_users = get_all_usersx()
    get_time = get_unix()
    photo_id = file_photo_id[0]
    video_id = file_video_id[0]

    for user in get_users:
        try:
            if len(photo_id) >= 5 and  len(video_id) <= 5:
                await bot.send_photo(user['user_id'], photo_id, message)
            elif len(video_id) >= 5 and len(photo_id) <= 5 :
                await bot.send_video(user['user_id'], video_id, caption=message)
            else:
                await bot.send_message(user['user_id'], message)

            receive_users += 1
        except:
            block_users += 1

        how_users += 1

        if how_users % 10 == 0:
            await call.message.edit_text(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... ({how_users}/{len(get_users)})</b>")

        await asyncio.sleep(0.08)

    await call.message.edit_text(
        f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ <code>{get_unix() - get_time}—Å–µ–∫</code></b>\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(get_users)}</code>\n"
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{receive_users}</code>\n"
        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{block_users}</code>"
    )




######################################## –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–ï–ú ########################################
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_refresh", state="*")
async def functions_profile_refresh(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]

    await state.finish()

    await call.message.delete()
    await call.message.answer(open_profile_admin(user_id), reply_markup=profile_search_finl(user_id))


# –ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_purchases", state="*")
async def functions_profile_purchases(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]

    last_purchases = last_purchasesx(user_id, 10)

    if len(last_purchases) >= 1:
        await call.answer("üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫")
        await call.message.delete()

        for purchases in last_purchases:
            # link_items = await upload_text(call, purchases['purchase_item'])

            await call.message.answer(f"<b>üßæ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>#{purchases['purchase_receipt']}</code></b>\n"
                                      f"üéÅ –¢–æ–≤–∞—Ä: <code>{purchases['purchase_position_name']} | {purchases['purchase_count']}—à—Ç | {purchases['purchase_price']}‚ÇΩ</code>\n"
                                      f"üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{purchases['purchase_date']}</code>\n")

        await call.message.answer(open_profile_admin(user_id), reply_markup=profile_search_finl(user_id))
    else:
        await call.answer("‚ùó –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_balance_add", state="*")
async def functions_profile_balance_add(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]

    await state.update_data(here_profile=user_id)
    await state.set_state("here_profile_add")

    await call.message.edit_text("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞</b>",
                                 reply_markup=profile_search_return_finl(user_id))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_balance_set", state="*")
async def functions_profile_balance_set(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]

    await state.update_data(here_profile=user_id)
    await state.set_state("here_profile_set")

    await call.message.edit_text("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>",
                                 reply_markup=profile_search_return_finl(user_id))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
@dp.message_handler(IsAdmin(), state="here_profile_add")
async def functions_profile_balance_add_get(message: Message, state: FSMContext):
    user_id = (await state.get_data())['here_profile']

    if not message.text.isdigit():
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞",
                             reply_markup=profile_search_return_finl(user_id))
        return

    if int(message.text) <= 0 or int(message.text) > 1000000000:
        await message.answer("<b>‚ùå –°—É–º–º–∞ –≤—ã–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 –∏ –±–æ–ª—å—à–µ 1 000 000 000</b>\n"
                             "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞")
        return

    await state.finish()
    get_user = get_userx(user_id=user_id)
    update_userx(user_id, user_balance=get_user['user_balance'] + int(message.text))

    await message.answer(
        f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> "
        f"–æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑—ã –Ω–∞ <code>{message.text}‚ÇΩ</code></b>")

    await message.bot.send_message(user_id, f"<b>üí∞ –û–ø–ª–∞—Ç–∞ <code>{message.text}‚ÇΩ</code> –ø–æ–ª—É—á–µ–Ω–∞.</b>")
    await message.answer(open_profile_admin(user_id), reply_markup=profile_search_finl(user_id))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(IsAdmin(), state="here_profile_set")
async def functions_profile_balance_set_get(message: Message, state: FSMContext):
    user_id = (await state.get_data())['here_profile']

    if is_number(message.text):
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
                             reply_markup=profile_search_return_finl(user_id))
        return

    if int(message.text) < -1000000000 or int(message.text) > 1000000000:
        await message.answer("<b>‚ùå –°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ (-)1 000 000 000</b>\n"
                             "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
                             reply_markup=profile_search_return_finl(user_id))
        return

    await state.finish()
    get_user = get_userx(user_id=user_id)
    update_userx(user_id, user_balance=message.text)

    await message.answer(
        f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> "
        f"–∏–∑–º–µ–Ω—ë–Ω –±–∞–ª–∞–Ω—Å –Ω–∞ <code>{message.text}‚ÇΩ</code></b>")

    await message.answer(open_profile_admin(user_id), reply_markup=profile_search_finl(user_id))


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_message", state="*")
async def functions_profile_user_message(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]

    await state.update_data(here_profile=user_id)
    await state.set_state("here_profile_message")

    await call.message.edit_text("<b>üíå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n"
                                 "‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                                 reply_markup=profile_search_return_finl(user_id))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(IsAdmin(), state="here_profile_message")
async def functions_profile_user_message_get(message: Message, state: FSMContext):
    user_id = (await state.get_data())['here_profile']
    await state.finish()

    get_message = "<b>üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n" + clear_html(message.text)
    get_user = get_userx(user_id=user_id)

    await message.bot.send_message(user_id, get_message)
    await message.answer(f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> "
                         f"–±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
                         f"{get_message}")

    await message.answer(open_profile_admin(user_id), reply_markup=profile_search_finl(user_id))
